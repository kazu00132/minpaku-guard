{"file_contents":{"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 0 0% 20%;\n\n  --border: 0 0% 90%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 0 0% 20%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 0 0% 20%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 349 45% 75%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 349 15% 92%;\n\n  --sidebar-accent-foreground: 349 45% 30%;\n\n  --sidebar-ring: 349 45% 75%;\n\n  --popover: 0 0% 95%;\n\n  --popover-foreground: 0 0% 20%;\n\n  --popover-border: 0 0% 90%;\n\n  --primary: 349 45% 75%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 92%;\n\n  --secondary-foreground: 0 0% 20%;\n\n  --muted: 0 2% 88%;\n\n  --muted-foreground: 0 0% 40%;\n\n  --accent: 349 12% 90%;\n\n  --accent-foreground: 349 45% 35%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 75%;\n  --ring: 349 45% 75%;\n  --chart-1: 349 45% 45%;\n  --chart-2: 217 91% 45%;\n  --chart-3: 142 71% 35%;\n  --chart-4: 38 92% 40%;\n  --chart-5: 270 50% 45%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.08), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.10), 0px 3px 7px -3px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 10px 24px -3px hsl(0 0% 0% / 0.12), 0px 6px 12px -4px hsl(0 0% 0% / 0.10);\n  --shadow-xl: 0px 20px 40px -4px hsl(0 0% 0% / 0.15), 0px 10px 24px -5px hsl(0 0% 0% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 217 33% 25%;\n\n  --card: 217 33% 17%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 217 33% 22%;\n\n  --sidebar: 220 35% 15%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 217 33% 20%;\n\n  --sidebar-primary: 349 45% 70%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 217 25% 22%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 349 45% 70%;\n\n  --popover: 217 30% 20%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 217 30% 26%;\n\n  --primary: 349 45% 65%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 217 28% 24%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 217 20% 18%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 217 18% 20%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 84% 50%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 217 33% 35%;\n  --ring: 349 45% 70%;\n  --chart-1: 349 45% 75%;\n  --chart-2: 217 91% 75%;\n  --chart-3: 142 71% 65%;\n  --chart-4: 38 92% 70%;\n  --chart-5: 270 50% 75%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.35);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.30), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.35), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.40), 0px 3px 7px -3px hsl(0 0% 0% / 0.35);\n  --shadow-lg: 0px 10px 24px -3px hsl(0 0% 0% / 0.45), 0px 6px 12px -4px hsl(0 0% 0% / 0.40);\n  --shadow-xl: 0px 20px 40px -4px hsl(0 0% 0% / 0.50), 0px 10px 24px -5px hsl(0 0% 0% / 0.45);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.60);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Mobile touch target enhancement for iPhone 13 (390px width)\n   * Extends clickable area to minimum 44x44px without changing visual size\n   * Based on iOS Human Interface Guidelines */\n  @media (max-width: 640px) {\n    .touch-target {\n      position: relative;\n    }\n    \n    .touch-target::after {\n      content: \"\";\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      min-width: 44px;\n      min-height: 44px;\n      /* Ensure it's clickable but invisible */\n    }\n  }\n}","size_bytes":11189},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/examples/AppSidebar.tsx":{"content":"import AppSidebar from '../AppSidebar';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n    </SidebarProvider>\n  );\n}\n","size_bytes":230},"client/src/components/examples/BookingsTable.tsx":{"content":"import BookingsTable from '../BookingsTable';\n\nexport default function BookingsTableExample() {\n  const mockBookings = [\n    {\n      id: 1,\n      guestName: \"山田 太郎\",\n      reservedAt: \"2025-10-20T15:00:00\",\n      reservedCount: 4,\n      actualCount: 6,\n      status: \"checked_in\" as const,\n      roomName: \"漁師の家\",\n      faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=YamadaTaro\"\n    },\n    {\n      id: 2,\n      guestName: \"佐藤 花子\",\n      reservedAt: \"2025-10-21T16:00:00\",\n      reservedCount: 2,\n      actualCount: 2,\n      status: \"checked_in\" as const,\n      roomName: \"長屋 A\",\n      faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=SatoHanako\"\n    },\n    {\n      id: 3,\n      guestName: \"田中 次郎\",\n      reservedAt: \"2025-10-22T14:00:00\",\n      reservedCount: 3,\n      actualCount: null,\n      status: \"booked\" as const,\n      roomName: \"長屋 B\",\n      faceImageUrl: null\n    }\n  ];\n\n  return (\n    <BookingsTable \n      bookings={mockBookings} \n      onViewDetails={(id) => console.log('View booking:', id)}\n      onCall={(id) => console.log('Call guest:', id)}\n      onEmail={(id) => console.log('Email guest:', id)}\n    />\n  );\n}\n","size_bytes":1201},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Bookings from \"@/pages/Bookings\";\nimport Alerts from \"@/pages/Alerts\";\nimport Devices from \"@/pages/Devices\";\nimport Demo from \"@/pages/Demo\";\nimport GuestDetail from \"@/pages/GuestDetail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/bookings\" component={Bookings} />\n      <Route path=\"/bookings/:id\" component={GuestDetail} />\n      <Route path=\"/alerts\" component={Alerts} />\n      <Route path=\"/devices\" component={Devices} />\n      <Route path=\"/demo\" component={Demo} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar />\n            <div className=\"flex flex-col flex-1\">\n              <header className=\"flex items-center justify-between p-4 border-b\">\n                <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                <ThemeToggle />\n              </header>\n              <main className=\"flex-1 overflow-auto p-6\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":1987},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/examples/DashboardStats.tsx":{"content":"import DashboardStats from '../DashboardStats';\n\nexport default function DashboardStatsExample() {\n  return <DashboardStats />;\n}\n","size_bytes":130},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/AlertsList.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Check, Mail, Phone } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport interface Alert {\n  id: number;\n  bookingId: number;\n  guestName: string;\n  roomName: string;\n  detectedAt: string;\n  reservedCount: number;\n  actualCount: number;\n  status: \"open\" | \"acknowledged\" | \"resolved\";\n}\n\ninterface AlertsListProps {\n  alerts: Alert[];\n  onAcknowledge?: (id: number) => void;\n  onContact?: (id: number, method: \"email\" | \"phone\") => void;\n}\n\nexport default function AlertsList({ alerts, onAcknowledge, onContact }: AlertsListProps) {\n  return (\n    <div className=\"space-y-3\">\n      {alerts.map((alert) => (\n        <Card key={alert.id} className=\"p-4\" data-testid={`card-alert-${alert.id}`}>\n          <div className=\"flex items-start gap-4\">\n            <div className=\"mt-1\">\n              <AlertTriangle className=\"w-5 h-5 text-amber-500\" />\n            </div>\n            <div className=\"flex-1 space-y-2\">\n              <div className=\"flex items-start justify-between gap-4\">\n                <div>\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <h4 className=\"font-semibold\" data-testid={`text-alert-guest-${alert.id}`}>\n                      {alert.guestName}\n                    </h4>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {alert.roomName}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">\n                    予約人数: <span className=\"font-medium\">{alert.reservedCount}</span> → \n                    実人数: <span className=\"font-semibold text-amber-500\">{alert.actualCount}</span>\n                  </p>\n                  <p className=\"text-xs text-muted-foreground font-mono\">\n                    {format(new Date(alert.detectedAt), \"yyyy-MM-dd HH:mm\")}\n                  </p>\n                </div>\n                {alert.status === \"open\" && (\n                  <Badge variant=\"outline\" className=\"bg-amber-50 dark:bg-amber-950 border-amber-200 dark:border-amber-800\">\n                    未対応\n                  </Badge>\n                )}\n                {alert.status === \"acknowledged\" && (\n                  <Badge variant=\"outline\" className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n                    対応中\n                  </Badge>\n                )}\n                {alert.status === \"resolved\" && (\n                  <Badge variant=\"outline\" className=\"bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800\">\n                    解決済\n                  </Badge>\n                )}\n              </div>\n              {alert.status === \"open\" && (\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => onAcknowledge?.(alert.id)}\n                    data-testid={`button-acknowledge-${alert.id}`}\n                  >\n                    <Check className=\"w-4 h-4 mr-1\" />\n                    確認済み\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => onContact?.(alert.id, \"email\")}\n                    data-testid={`button-email-${alert.id}`}\n                  >\n                    <Mail className=\"w-4 h-4 mr-1\" />\n                    メール\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => onContact?.(alert.id, \"phone\")}\n                    data-testid={`button-phone-${alert.id}`}\n                  >\n                    <Phone className=\"w-4 h-4 mr-1\" />\n                    電話\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4111},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/BookingsTable.tsx":{"content":"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Eye, Phone, Mail, Pencil } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport interface Booking {\n  id: number;\n  guestName: string;\n  reservedAt: string;\n  reservedCount: number;\n  actualCount: number | null;\n  status: \"booked\" | \"checked_in\" | \"checked_out\";\n  roomName: string;\n  faceImageUrl?: string | null;\n}\n\ninterface BookingsTableProps {\n  bookings: Booking[];\n  onViewDetails?: (id: number) => void;\n  onCall?: (id: number) => void;\n  onEmail?: (id: number) => void;\n  onEdit?: (booking: Booking) => void;\n}\n\nexport default function BookingsTable({ bookings, onViewDetails, onCall, onEmail, onEdit }: BookingsTableProps) {\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"checked_in\":\n        return <Badge variant=\"default\" data-testid={`badge-status-checked_in`}>入室中</Badge>;\n      case \"checked_out\":\n        return <Badge variant=\"secondary\" data-testid={`badge-status-checked_out`}>チェックアウト</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid={`badge-status-booked`}>未入室</Badge>;\n    }\n  };\n\n  const hasDiscrepancy = (booking: Booking) => {\n    return booking.actualCount !== null && booking.actualCount > booking.reservedCount;\n  };\n\n  return (\n    <div className=\"border rounded-md overflow-x-auto\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>予約日時</TableHead>\n            <TableHead>氏名</TableHead>\n            <TableHead>部屋</TableHead>\n            <TableHead className=\"text-center\">予約人数</TableHead>\n            <TableHead className=\"text-center\">実人数</TableHead>\n            <TableHead>状態</TableHead>\n            <TableHead className=\"text-right\">操作</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {bookings.map((booking) => (\n            <TableRow key={booking.id} data-testid={`row-booking-${booking.id}`}>\n              <TableCell className=\"font-mono text-sm\" data-testid={`text-reserved-at-${booking.id}`}>\n                {format(new Date(booking.reservedAt), \"yyyy-MM-dd HH:mm\")}\n              </TableCell>\n              <TableCell data-testid={`text-guest-name-${booking.id}`}>\n                <div className=\"flex items-center gap-3\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src={booking.faceImageUrl || undefined} />\n                    <AvatarFallback className=\"text-xs\">{booking.guestName.slice(0, 2)}</AvatarFallback>\n                  </Avatar>\n                  <span className=\"font-medium\">{booking.guestName}</span>\n                </div>\n              </TableCell>\n              <TableCell data-testid={`text-room-${booking.id}`}>{booking.roomName}</TableCell>\n              <TableCell className=\"text-center\" data-testid={`text-reserved-count-${booking.id}`}>\n                {booking.reservedCount}\n              </TableCell>\n              <TableCell className=\"text-center\" data-testid={`text-actual-count-${booking.id}`}>\n                {booking.actualCount !== null ? (\n                  <span className={hasDiscrepancy(booking) ? \"text-amber-500 font-semibold\" : \"\"}>\n                    {booking.actualCount}\n                  </span>\n                ) : (\n                  <span className=\"text-muted-foreground\">-</span>\n                )}\n              </TableCell>\n              <TableCell>{getStatusBadge(booking.status)}</TableCell>\n              <TableCell className=\"text-right\">\n                <div className=\"flex justify-end gap-1\">\n                  <Button \n                    size=\"sm\" \n                    variant=\"ghost\"\n                    onClick={() => onEdit?.(booking)}\n                    data-testid={`button-edit-${booking.id}`}\n                  >\n                    <Pencil className=\"w-4 h-4\" />\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"ghost\"\n                    onClick={() => onCall?.(booking.id)}\n                    data-testid={`button-call-${booking.id}`}\n                  >\n                    <Phone className=\"w-4 h-4\" />\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"ghost\"\n                    onClick={() => onEmail?.(booking.id)}\n                    data-testid={`button-email-${booking.id}`}\n                  >\n                    <Mail className=\"w-4 h-4\" />\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"ghost\"\n                    onClick={() => onViewDetails?.(booking.id)}\n                    data-testid={`button-view-${booking.id}`}\n                  >\n                    <Eye className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","size_bytes":5215},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = savedTheme || (prefersDark ? \"dark\" : \"light\");\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button \n      variant=\"ghost\" \n      size=\"icon\" \n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1143},"client/src/pages/Alerts.tsx":{"content":"import AlertsList from \"@/components/AlertsList\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Alerts() {\n  const allAlerts = [\n    {\n      id: 1,\n      bookingId: 1,\n      guestName: \"山田 太郎\",\n      roomName: \"漁師の家\",\n      detectedAt: \"2025-10-20T18:30:00\",\n      reservedCount: 4,\n      actualCount: 6,\n      status: \"open\" as const\n    },\n    {\n      id: 2,\n      bookingId: 3,\n      guestName: \"鈴木 一郎\",\n      roomName: \"長屋 C\",\n      detectedAt: \"2025-10-19T20:15:00\",\n      reservedCount: 2,\n      actualCount: 3,\n      status: \"acknowledged\" as const\n    },\n    {\n      id: 3,\n      bookingId: 5,\n      guestName: \"高橋 美咲\",\n      roomName: \"長屋 B\",\n      detectedAt: \"2025-10-18T19:00:00\",\n      reservedCount: 3,\n      actualCount: 4,\n      status: \"resolved\" as const\n    }\n  ];\n\n  const openAlerts = allAlerts.filter(a => a.status === \"open\");\n  const acknowledgedAlerts = allAlerts.filter(a => a.status === \"acknowledged\");\n  const resolvedAlerts = allAlerts.filter(a => a.status === \"resolved\");\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold mb-2\">アラート管理</h1>\n        <p className=\"text-muted-foreground\">予約人数と実人数の差分を管理</p>\n      </div>\n\n      <Tabs defaultValue=\"open\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"open\" data-testid=\"tab-open\">\n            未対応 ({openAlerts.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"acknowledged\" data-testid=\"tab-acknowledged\">\n            対応中 ({acknowledgedAlerts.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"resolved\" data-testid=\"tab-resolved\">\n            解決済 ({resolvedAlerts.length})\n          </TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"open\" className=\"mt-6\">\n          <AlertsList \n            alerts={openAlerts}\n            onAcknowledge={(id) => console.log('Acknowledge:', id)}\n            onContact={(id, method) => console.log('Contact:', id, method)}\n          />\n        </TabsContent>\n        <TabsContent value=\"acknowledged\" className=\"mt-6\">\n          <AlertsList \n            alerts={acknowledgedAlerts}\n            onAcknowledge={(id) => console.log('Acknowledge:', id)}\n            onContact={(id, method) => console.log('Contact:', id, method)}\n          />\n        </TabsContent>\n        <TabsContent value=\"resolved\" className=\"mt-6\">\n          <AlertsList \n            alerts={resolvedAlerts}\n            onAcknowledge={(id) => console.log('Acknowledge:', id)}\n            onContact={(id, method) => console.log('Contact:', id, method)}\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":2769},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/GuestTimeline.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { LogIn, LogOut } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport interface EntryEvent {\n  id: number;\n  timestamp: string;\n  eventType: \"enter\" | \"leave\";\n  peopleCount: number;\n}\n\ninterface GuestTimelineProps {\n  events: EntryEvent[];\n}\n\nexport default function GuestTimeline({ events }: GuestTimelineProps) {\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"font-semibold mb-4\">入退室履歴</h3>\n      <div className=\"space-y-4\">\n        {events.map((event, index) => (\n          <div key={event.id} className=\"flex gap-4\" data-testid={`event-${event.id}`}>\n            <div className=\"flex flex-col items-center\">\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                event.eventType === \"enter\" \n                  ? \"bg-green-100 dark:bg-green-950 text-green-600 dark:text-green-400\" \n                  : \"bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400\"\n              }`}>\n                {event.eventType === \"enter\" ? (\n                  <LogIn className=\"w-4 h-4\" />\n                ) : (\n                  <LogOut className=\"w-4 h-4\" />\n                )}\n              </div>\n              {index < events.length - 1 && (\n                <div className=\"w-0.5 h-12 bg-border mt-2\" />\n              )}\n            </div>\n            <div className=\"flex-1 pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <p className=\"font-medium\">\n                  {event.eventType === \"enter\" ? \"入室\" : \"退室\"}\n                </p>\n                <p className=\"text-sm text-muted-foreground font-mono\">\n                  {format(new Date(event.timestamp), \"HH:mm\")}\n                </p>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                人数: <span className=\"font-medium\">{event.peopleCount}</span>名\n              </p>\n              <p className=\"text-xs text-muted-foreground font-mono mt-1\">\n                {format(new Date(event.timestamp), \"yyyy-MM-dd\")}\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2204},"client/src/pages/GuestDetail.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport GuestTimeline from \"@/components/GuestTimeline\";\nimport AlertsList from \"@/components/AlertsList\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Phone, Mail, ArrowLeft, Lock, Power } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function GuestDetail() {\n  const guest = {\n    id: 1,\n    name: \"山田 太郎\",\n    age: 35,\n    phone: \"090-1234-5678\",\n    email: \"yamada@example.com\",\n    reservedAt: \"2025-10-20T15:00:00\",\n    reservedCount: 4,\n    actualCount: 6,\n    status: \"checked_in\",\n    roomName: \"漁師の家\",\n    licenseImageUrl: null,\n    faceImageUrl: null\n  };\n\n  const entryEvents = [\n    {\n      id: 1,\n      timestamp: \"2025-10-20T15:30:00\",\n      eventType: \"enter\" as const,\n      peopleCount: 4\n    },\n    {\n      id: 2,\n      timestamp: \"2025-10-20T18:15:00\",\n      eventType: \"enter\" as const,\n      peopleCount: 6\n    }\n  ];\n\n  const alerts = [\n    {\n      id: 1,\n      bookingId: 1,\n      guestName: \"山田 太郎\",\n      roomName: \"漁師の家\",\n      detectedAt: \"2025-10-20T18:30:00\",\n      reservedCount: 4,\n      actualCount: 6,\n      status: \"open\" as const\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <Link href=\"/bookings\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"mb-4\" data-testid=\"button-back\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            予約一覧に戻る\n          </Button>\n        </Link>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <Avatar className=\"w-16 h-16\">\n              <AvatarImage src={guest.faceImageUrl || undefined} />\n              <AvatarFallback className=\"text-lg\">{guest.name.slice(0, 2)}</AvatarFallback>\n            </Avatar>\n            <div>\n              <h1 className=\"text-3xl font-bold\">{guest.name}</h1>\n              <p className=\"text-muted-foreground\">{guest.roomName}</p>\n            </div>\n          </div>\n          <Badge variant=\"default\">入室中</Badge>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"p-4\">\n          <p className=\"text-sm text-muted-foreground mb-1\">年齢</p>\n          <p className=\"text-xl font-semibold\">{guest.age}歳</p>\n        </Card>\n        <Card className=\"p-4\">\n          <p className=\"text-sm text-muted-foreground mb-1\">予約人数</p>\n          <p className=\"text-xl font-semibold\">{guest.reservedCount}名</p>\n        </Card>\n        <Card className=\"p-4\">\n          <p className=\"text-sm text-muted-foreground mb-1\">実人数</p>\n          <p className=\"text-xl font-semibold text-amber-500\">{guest.actualCount}名</p>\n        </Card>\n      </div>\n\n      <Card className=\"p-6\">\n        <h3 className=\"font-semibold mb-4\">連絡先</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-1\">電話番号</p>\n            <p className=\"font-medium\">{guest.phone}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-1\">メールアドレス</p>\n            <p className=\"font-medium\">{guest.email}</p>\n          </div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button variant=\"outline\" data-testid=\"button-call\">\n            <Phone className=\"w-4 h-4 mr-2\" />\n            電話をかける\n          </Button>\n          <Button variant=\"outline\" data-testid=\"button-email\">\n            <Mail className=\"w-4 h-4 mr-2\" />\n            メール送信\n          </Button>\n        </div>\n      </Card>\n\n      <Tabs defaultValue=\"timeline\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"timeline\" data-testid=\"tab-timeline\">入退室履歴</TabsTrigger>\n          <TabsTrigger value=\"alerts\" data-testid=\"tab-alerts\">アラート</TabsTrigger>\n          <TabsTrigger value=\"devices\" data-testid=\"tab-devices\">デバイス操作</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"timeline\" className=\"mt-6\">\n          <GuestTimeline events={entryEvents} />\n        </TabsContent>\n        <TabsContent value=\"alerts\" className=\"mt-6\">\n          <AlertsList \n            alerts={alerts}\n            onAcknowledge={(id) => console.log('Acknowledge:', id)}\n            onContact={(id, method) => console.log('Contact:', id, method)}\n          />\n        </TabsContent>\n        <TabsContent value=\"devices\" className=\"mt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card className=\"p-6\">\n              <h4 className=\"font-semibold mb-4\">玄関ドア</h4>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-lock-door\">\n                  <Lock className=\"w-4 h-4 mr-2\" />\n                  施錠\n                </Button>\n              </div>\n            </Card>\n            <Card className=\"p-6\">\n              <h4 className=\"font-semibold mb-4\">ブレーカー</h4>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-power-off\">\n                  <Power className=\"w-4 h-4 mr-2\" />\n                  電源OFF\n                </Button>\n              </div>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":5633},"client/src/components/examples/DeviceControl.tsx":{"content":"import DeviceControl from '../DeviceControl';\n\nexport default function DeviceControlExample() {\n  const mockDevices = [\n    {\n      id: 1,\n      name: \"玄関ドア\",\n      type: \"lock\" as const,\n      roomName: \"漁師の家\",\n      status: \"online\" as const,\n      state: \"on\" as const\n    },\n    {\n      id: 2,\n      name: \"ブレーカー\",\n      type: \"breaker\" as const,\n      roomName: \"漁師の家\",\n      status: \"online\" as const,\n      state: \"on\" as const\n    },\n    {\n      id: 3,\n      name: \"玄関ドア\",\n      type: \"lock\" as const,\n      roomName: \"長屋 A\",\n      status: \"online\" as const,\n      state: \"off\" as const\n    }\n  ];\n\n  return <DeviceControl devices={mockDevices} onControl={(id, cmd) => console.log('Device control:', id, cmd)} />;\n}\n","size_bytes":770},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/Demo.tsx":{"content":"import { useState } from \"react\";\nimport { Camera, Upload, CheckCircle, AlertCircle, Video, Users } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface VerificationResult {\n  isMatch: boolean;\n  confidence: number;\n  guestName: string;\n}\n\ninterface DifyResponse {\n  success: boolean;\n  workflowId: string;\n  message: string;\n}\n\ninterface FrameResult {\n  index: number;\n  peopleCount: number;\n  image: string;\n}\n\ninterface VideoProcessResponse {\n  success: boolean;\n  reservedCount: number;\n  detectedCount: number;\n  frameCount: number;\n  frameCounts: number[];\n  status: \"error\" | \"normal\";\n  message: string;\n  frames: FrameResult[];\n}\n\ninterface DifySendResponse {\n  success: boolean;\n  difyResponse: any;\n  message: string;\n}\n\nexport default function Demo() {\n  // Photo verification states\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string>(\"\");\n  const [selectedGuest, setSelectedGuest] = useState<string>(\"\");\n  const [verificationResult, setVerificationResult] = useState<VerificationResult | null>(null);\n  \n  // Video processing states\n  const [selectedVideo, setSelectedVideo] = useState<File | null>(null);\n  const [videoPreviewUrl, setVideoPreviewUrl] = useState<string>(\"\");\n  const [selectedBooking, setSelectedBooking] = useState<string>(\"\");\n  const [videoProcessResult, setVideoProcessResult] = useState<VideoProcessResponse | null>(null);\n  \n  const { toast } = useToast();\n\n  const mockGuests = [\n    { id: \"1\", name: \"田中太郎\", faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=tanaka\" },\n    { id: \"2\", name: \"佐藤花子\", faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=sato\" },\n    { id: \"3\", name: \"山田次郎\", faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=yamada\" },\n  ];\n\n  const mockBookings = [\n    { id: \"1\", guestName: \"田中太郎\", reservedCount: 4, roomName: \"民家\" },\n    { id: \"2\", guestName: \"佐藤花子\", reservedCount: 2, roomName: \"長屋\" },\n  ];\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreviewUrl(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n      setVerificationResult(null);\n    }\n  };\n\n  const handleVideoChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedVideo(file);\n      const url = URL.createObjectURL(file);\n      setVideoPreviewUrl(url);\n      setVideoProcessResult(null);\n    }\n  };\n\n  const verifyFaceMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedFile || !selectedGuest) {\n        throw new Error(\"写真とゲストを選択してください\");\n      }\n\n      const formData = new FormData();\n      formData.append(\"photo\", selectedFile);\n      formData.append(\"guestId\", selectedGuest);\n\n      const response = await fetch(\"/api/demo/verify\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"顔照合に失敗しました\");\n      }\n\n      const data = await response.json();\n      return data as VerificationResult;\n    },\n    onSuccess: (data: VerificationResult) => {\n      setVerificationResult(data);\n      toast({\n        title: data.isMatch ? \"照合成功\" : \"照合失敗\",\n        description: `信頼度: ${(data.confidence * 100).toFixed(1)}%`,\n        variant: data.isMatch ? \"default\" : \"destructive\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"エラー\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const triggerDifyMutation = useMutation({\n    mutationFn: async () => {\n      if (!verificationResult) {\n        throw new Error(\"先に顔照合を実行してください\");\n      }\n\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/demo/trigger-dify\",\n        {\n          guestId: selectedGuest,\n          confidence: verificationResult.confidence,\n          isMatch: verificationResult.isMatch,\n        }\n      );\n\n      return response.json() as Promise<DifyResponse>;\n    },\n    onSuccess: (data: DifyResponse) => {\n      toast({\n        title: \"Difyワークフロー起動成功\",\n        description: data.message,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Difyワークフロー起動失敗\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const processVideoMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedVideo || !selectedBooking) {\n        throw new Error(\"動画と予約を選択してください\");\n      }\n\n      const booking = mockBookings.find(b => b.id === selectedBooking);\n      if (!booking) {\n        throw new Error(\"予約が見つかりません\");\n      }\n\n      const formData = new FormData();\n      formData.append(\"video\", selectedVideo);\n      formData.append(\"reservedCount\", booking.reservedCount.toString());\n\n      const response = await fetch(\"/api/demo/process-video\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"動画処理に失敗しました\");\n      }\n\n      const data = await response.json();\n      return data as VideoProcessResponse;\n    },\n    onSuccess: (data: VideoProcessResponse) => {\n      setVideoProcessResult(data);\n      toast({\n        title: data.status === \"error\" ? \"差分検知\" : \"処理完了\",\n        description: data.message,\n        variant: data.status === \"error\" ? \"destructive\" : \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"エラー\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendToDifyMutation = useMutation({\n    mutationFn: async () => {\n      if (!videoProcessResult) {\n        throw new Error(\"先に動画処理を実行してください\");\n      }\n\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/demo/send-to-dify\",\n        {\n          reservedCount: videoProcessResult.reservedCount,\n          detectedCount: videoProcessResult.detectedCount,\n          frames: videoProcessResult.frames,\n        }\n      );\n\n      return response.json() as Promise<DifySendResponse>;\n    },\n    onSuccess: (data: DifySendResponse) => {\n      toast({\n        title: \"Dify送信成功\",\n        description: data.message,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Dify送信失敗\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">デモ - 顔認証・動画人数カウント</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          スマホから写真や動画をアップロードして、顔照合や人数カウントをテストします\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"photo\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"photo\" data-testid=\"tab-photo\">\n            <Camera className=\"mr-2 h-4 w-4\" />\n            顔認証テスト\n          </TabsTrigger>\n          <TabsTrigger value=\"video\" data-testid=\"tab-video\">\n            <Video className=\"mr-2 h-4 w-4\" />\n            動画人数カウント\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"photo\" className=\"mt-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>写真アップロード</CardTitle>\n            <CardDescription>カメラで撮影するか、ギャラリーから選択してください</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"photo-upload\">写真を選択</Label>\n              <div className=\"flex gap-2\">\n                <input\n                  id=\"photo-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  capture=\"user\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                  data-testid=\"input-photo-upload\"\n                />\n                <Button\n                  variant=\"outline\"\n                  onClick={() => document.getElementById(\"photo-upload\")?.click()}\n                  className=\"flex-1\"\n                  data-testid=\"button-camera\"\n                >\n                  <Camera className=\"mr-2 h-4 w-4\" />\n                  カメラ撮影\n                </Button>\n                <input\n                  id=\"gallery-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                  data-testid=\"input-gallery-upload\"\n                />\n                <Button\n                  variant=\"outline\"\n                  onClick={() => document.getElementById(\"gallery-upload\")?.click()}\n                  className=\"flex-1\"\n                  data-testid=\"button-gallery\"\n                >\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  ギャラリー\n                </Button>\n              </div>\n            </div>\n\n            {previewUrl && (\n              <div className=\"space-y-2\">\n                <Label>プレビュー</Label>\n                <img\n                  src={previewUrl}\n                  alt=\"Preview\"\n                  className=\"w-full h-64 object-cover rounded-lg border\"\n                  data-testid=\"img-preview\"\n                />\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"guest-select\">照合するゲストを選択</Label>\n              <Select value={selectedGuest} onValueChange={setSelectedGuest}>\n                <SelectTrigger id=\"guest-select\" data-testid=\"select-guest\">\n                  <SelectValue placeholder=\"ゲストを選択\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {mockGuests.map((guest) => (\n                    <SelectItem key={guest.id} value={guest.id}>\n                      {guest.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              onClick={() => verifyFaceMutation.mutate()}\n              disabled={!selectedFile || !selectedGuest || verifyFaceMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"button-verify\"\n            >\n              {verifyFaceMutation.isPending ? \"照合中...\" : \"顔照合を実行\"}\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>照合結果</CardTitle>\n            <CardDescription>Face APIによる顔照合の結果を表示します</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {verificationResult ? (\n              <>\n                <div className=\"flex items-center gap-4 p-4 rounded-lg border bg-card\">\n                  {verificationResult.isMatch ? (\n                    <CheckCircle className=\"h-12 w-12 text-green-500\" />\n                  ) : (\n                    <AlertCircle className=\"h-12 w-12 text-red-500\" />\n                  )}\n                  <div className=\"flex-1\">\n                    <p className=\"font-semibold text-lg\" data-testid=\"text-result-status\">\n                      {verificationResult.isMatch ? \"照合成功\" : \"照合失敗\"}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {verificationResult.guestName}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">信頼度</span>\n                    <span className=\"font-semibold\" data-testid=\"text-confidence\">\n                      {(verificationResult.confidence * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-secondary rounded-full h-2\">\n                    <div\n                      className=\"bg-primary h-2 rounded-full transition-all\"\n                      style={{ width: `${verificationResult.confidence * 100}%` }}\n                    />\n                  </div>\n                </div>\n\n                <Button\n                  onClick={() => triggerDifyMutation.mutate()}\n                  disabled={triggerDifyMutation.isPending}\n                  className=\"w-full\"\n                  variant=\"default\"\n                  data-testid=\"button-trigger-dify\"\n                >\n                  {triggerDifyMutation.isPending ? \"起動中...\" : \"Difyワークフロー起動\"}\n                </Button>\n              </>\n            ) : (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <p>写真をアップロードして顔照合を実行してください</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"video\" className=\"mt-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>動画アップロード</CardTitle>\n                <CardDescription>動画から10秒ごとに人数をカウントします</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"video-upload\">動画を選択</Label>\n                  <div className=\"flex gap-2\">\n                    <input\n                      id=\"video-camera\"\n                      type=\"file\"\n                      accept=\"video/*\"\n                      capture=\"environment\"\n                      onChange={handleVideoChange}\n                      className=\"hidden\"\n                      data-testid=\"input-video-camera\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => document.getElementById(\"video-camera\")?.click()}\n                      className=\"flex-1\"\n                      data-testid=\"button-video-camera\"\n                    >\n                      <Video className=\"mr-2 h-4 w-4\" />\n                      動画撮影\n                    </Button>\n                    <input\n                      id=\"video-gallery\"\n                      type=\"file\"\n                      accept=\"video/*\"\n                      onChange={handleVideoChange}\n                      className=\"hidden\"\n                      data-testid=\"input-video-gallery\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => document.getElementById(\"video-gallery\")?.click()}\n                      className=\"flex-1\"\n                      data-testid=\"button-video-gallery\"\n                    >\n                      <Upload className=\"mr-2 h-4 w-4\" />\n                      ギャラリー\n                    </Button>\n                  </div>\n                </div>\n\n                {videoPreviewUrl && (\n                  <div className=\"space-y-2\">\n                    <Label>プレビュー</Label>\n                    <video\n                      src={videoPreviewUrl}\n                      controls\n                      className=\"w-full h-64 rounded-lg border\"\n                      data-testid=\"video-preview\"\n                    />\n                  </div>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"booking-select\">予約を選択</Label>\n                  <Select value={selectedBooking} onValueChange={setSelectedBooking}>\n                    <SelectTrigger id=\"booking-select\" data-testid=\"select-booking\">\n                      <SelectValue placeholder=\"予約を選択\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {mockBookings.map((booking) => (\n                        <SelectItem key={booking.id} value={booking.id}>\n                          {booking.guestName} - {booking.roomName} ({booking.reservedCount}名)\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Button\n                  onClick={() => processVideoMutation.mutate()}\n                  disabled={!selectedVideo || !selectedBooking || processVideoMutation.isPending}\n                  className=\"w-full\"\n                  data-testid=\"button-process-video\"\n                >\n                  {processVideoMutation.isPending ? \"処理中...\" : \"動画を処理\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>人数カウント結果</CardTitle>\n                <CardDescription>5秒ごとの人数判定結果を表示します</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {videoProcessResult ? (\n                  <>\n                    <div className={`flex items-center gap-4 p-4 rounded-lg border ${\n                      videoProcessResult.status === \"error\" ? \"bg-destructive/10 border-destructive\" : \"bg-card\"\n                    }`}>\n                      {videoProcessResult.status === \"error\" ? (\n                        <AlertCircle className=\"h-12 w-12 text-destructive\" />\n                      ) : (\n                        <CheckCircle className=\"h-12 w-12 text-green-500\" />\n                      )}\n                      <div className=\"flex-1\">\n                        <p className=\"font-semibold text-lg\" data-testid=\"text-video-status\">\n                          {videoProcessResult.status === \"error\" ? \"差分検知\" : \"正常\"}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          予約: {videoProcessResult.reservedCount}名 / 検出: {videoProcessResult.detectedCount}名\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-semibold\">フレーム分析結果 ({videoProcessResult.frameCount}フレーム)</p>\n                      <div className=\"grid grid-cols-2 gap-2 max-h-96 overflow-y-auto\">\n                        {videoProcessResult.frames.map((frame, index) => (\n                          <div\n                            key={index}\n                            className=\"p-2 rounded-lg border bg-card\"\n                            data-testid={`frame-${index}`}\n                          >\n                            <img \n                              src={frame.image} \n                              alt={`Frame ${frame.index}`}\n                              className=\"w-full h-24 object-cover rounded mb-2\"\n                            />\n                            <div className=\"text-xs\">\n                              <p className=\"font-semibold\">フレーム {frame.index}</p>\n                              <p className=\"text-muted-foreground\">{frame.peopleCount}名検出</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Button\n                      onClick={() => sendToDifyMutation.mutate()}\n                      disabled={sendToDifyMutation.isPending}\n                      className=\"w-full\"\n                      variant=\"default\"\n                      data-testid=\"button-send-dify\"\n                    >\n                      {sendToDifyMutation.isPending ? \"送信中...\" : \"Difyへ連携\"}\n                    </Button>\n                  </>\n                ) : (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <p>動画をアップロードして処理を実行してください</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>API仕様</CardTitle>\n          <CardDescription>実装されているAPIエンドポイント</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">1. 顔照合API</h3>\n            <pre className=\"bg-secondary p-4 rounded-lg text-xs overflow-x-auto\">\n{`POST /api/demo/verify\nContent-Type: multipart/form-data\n\nFormData:\n  - photo: File (画像ファイル)\n  - guestId: string (ゲストID)\n\nResponse:\n{\n  \"isMatch\": boolean,\n  \"confidence\": number (0-1),\n  \"guestName\": string\n}`}\n            </pre>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">2. 動画人数カウントAPI</h3>\n            <pre className=\"bg-secondary p-4 rounded-lg text-xs overflow-x-auto\">\n{`POST /api/demo/process-video\nContent-Type: multipart/form-data\n\nFormData:\n  - video: File (動画ファイル)\n  - reservedCount: string (予約人数)\n\nResponse:\n{\n  \"success\": boolean,\n  \"reservedCount\": number,\n  \"detectedCount\": number,\n  \"frameCount\": number,\n  \"frameCounts\": number[],\n  \"status\": \"error\" | \"normal\",\n  \"message\": string,\n  \"frames\": [\n    {\n      \"index\": number,\n      \"peopleCount\": number,\n      \"image\": string (base64)\n    }\n  ]\n}`}\n            </pre>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold\">3. Dify連携API</h3>\n            <pre className=\"bg-secondary p-4 rounded-lg text-xs overflow-x-auto\">\n{`POST /api/demo/send-to-dify\nContent-Type: application/json\n\nBody:\n{\n  \"reservedCount\": number,\n  \"detectedCount\": number,\n  \"frames\": FrameResult[]\n}\n\nResponse:\n{\n  \"success\": boolean,\n  \"difyResponse\": object,\n  \"message\": string\n}`}\n            </pre>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":23117},"replit.md":{"content":"# Minpaku Guard - 民泊管理システム\n\n## プロジェクト概要\n\n富山の漁師町で民泊を運営する40代共働き夫婦のための、予約人数と実人数の差分を自動検知する管理ダッシュボード。\n\n## 利用者\n\n- **対象**: 富山市在住の40代共働き夫婦\n- **物件**: 漁師町の民家 + 長屋（6世帯のうち1戸）\n- **運用**: 富山市から車で30分の距離から遠隔管理\n\n## 主要機能\n\n### 1. 予約管理\n- 宿泊者情報（氏名、年齢、免許証、顔写真、連絡先）\n- 予約日時、予約人数、部屋情報\n- ステータス管理（未入室・入室中・チェックアウト）\n\n### 2. 入退室トラッキング\n- カメラによる入退室検知\n- 実人数の自動カウント\n- 入退室イベントのタイムライン表示\n\n### 3. 差分アラート\n- 予約人数 vs 実人数の自動比較\n- 差分検知時の自動アラート生成\n- アラート状態管理（未対応・対応中・解決済）\n\n### 4. 連絡機能\n- 電話発信（Twilio統合予定）\n- メール送信（SendGrid統合予定）\n- 連絡履歴の記録\n\n### 5. デバイス制御\n- 玄関鍵の施錠・解錠（SwitchBot統合予定）\n- ブレーカーのON/OFF（SwitchBot統合予定）\n- 実行ログの記録\n\n### 6. デモ機能\n- **顔認証テスト**\n  - スマホ写真アップロード（カメラ撮影・ギャラリー選択）\n  - Face API顔照合テスト（Azure/AWS推奨、現在はモック実装）\n  - Difyワークフロー起動テスト（モック実装）\n- **動画人数カウント**\n  - スマホ動画アップロード（カメラ撮影・ギャラリー選択）\n  - ffmpegによる5秒ごとのフレーム抽出\n  - OpenAI Vision API (GPT-4o)による人数カウント（実装済み）\n  - 予約人数との差分検知\n  - Dify APIへの結果送信（実装済み）\n\n## 技術スタック\n\n### フロントエンド\n- React + TypeScript\n- Vite\n- Tailwind CSS + Shadcn UI\n- Wouter（ルーティング）\n- React Query（データフェッチング）\n\n### バックエンド\n- Express.js + TypeScript\n- SQLite（開発環境）→ PostgreSQL（本番環境）\n- In-memory storage（現在）\n\n### デザイン\n- **アクセントカラー**: 白えびピンク (#F6C6D0)\n- **フォント**: Inter（本文）、JetBrains Mono（モノスペース）\n- **ダークモード対応**: あり\n- **iPhone 13最適化**: 390px幅対応、横スクロールテーブル、タッチターゲット拡張\n\n## システム要件\n\n### 予約制約\n- **同時予約数**: 最大2件\n  - システムは最大2件の同時予約を想定した設計\n  - UIとデータ表示はこの制約を考慮\n\n### 外部連携（予定）\n\n#### 1. Dify（AI処理・アラート通知）\n- **実装済み**: 動画処理結果送信API（http://dify.tamao.tech/v1/workflows/run）\n  - DIFY_API_KEY: 環境変数として安全に保存済み\n  - 予約人数、検出人数、フレームデータを送信\n- **予定**: カメラ推論結果受信\n  - 入退室イベントを `/api/webhooks/entry` に POST\n  - 差分検知時に自動アラート生成\n\n#### 2. SwitchBot\n- 鍵とブレーカーの遠隔制御\n- デバイス状態の監視\n\n#### 3. SendGrid / Twilio\n- メール・SMS・電話による宿泊者連絡\n- オーナーへのアラート通知\n\n#### 4. OpenAI Vision API（GPT-4o）\n- **実装済み**: 動画フレームからの人数カウント\n  - OPENAI_API_KEY: 環境変数として安全に保存済み\n  - base64エンコードされた画像を送信\n  - 各フレームの人数を検出\n  - エラー時はフォールバック処理\n\n#### 5. Face API（推奨: Azure Face API または AWS Rekognition）\n- 1:1顔照合によるゲスト本人確認\n- 信頼度スコア取得（80%以上で照合成功）\n- 現在はモック実装、後で実APIに切り替え可能\n\n## API エンドポイント（計画）\n\n### 予約関連\n- `GET /api/bookings` - 予約一覧取得\n- `POST /api/bookings` - 新規予約作成\n- `GET /api/bookings/:id` - 予約詳細取得\n- `PATCH /api/bookings/:id` - 予約更新\n\n### Webhook\n- `POST /api/webhooks/entry` - 入退室イベント受信（Difyから）\n\n### アラート\n- `GET /api/alerts` - アラート一覧取得\n- `PATCH /api/alerts/:id` - アラート状態更新\n\n### デバイス制御\n- `POST /api/devices/:id/command` - デバイス操作\n\n### 通知\n- `POST /api/bookings/:id/notify` - 宿泊者への通知送信\n\n### デモ\n- `POST /api/demo/verify` - 顔照合API（現在はモック実装）\n- `POST /api/demo/trigger-dify` - Difyワークフロー起動（現在はモック実装）\n- `POST /api/demo/process-video` - 動画処理API（ffmpeg実装済み）\n- `POST /api/demo/send-to-dify` - Dify連携API（実装済み）\n\n## データモデル\n\n### Guests（宿泊者）\n- id, fullName, age, phone, email\n- licenseImageUrl（免許証画像）\n- faceImageUrl（顔写真）\n\n### Rooms（部屋）\n- id, name, address, notes\n\n### Bookings（予約）\n- id, guestId, roomId\n- reservedAt, reservedCount\n- status（booked/checked_in/checked_out）\n\n### EntryEvents（入退室イベント）\n- id, bookingId, timestamp\n- eventType（enter/leave）\n- peopleCount\n\n### Alerts（アラート）\n- id, bookingId, detectedAt\n- reservedCount, actualCount\n- status（open/acknowledged/resolved）\n\n### Devices（デバイス）\n- id, roomId, type（lock/breaker）\n- name, externalId\n\n## 開発状況\n\n### 完成機能\n- ✅ ダッシュボードUI\n- ✅ 予約一覧表示（顔写真付き）\n- ✅ 予約編集機能（実人数含む）\n- ✅ アラート表示・管理\n- ✅ デバイス制御UI（モック）\n- ✅ 入退室タイムライン表示\n- ✅ ダークモード対応\n- ✅ レスポンシブデザイン\n- ✅ iPhone 13最適化（390px幅対応）\n- ✅ デモ機能（顔認証テスト）\n  - スマホ写真アップロード\n  - Face API照合（モック実装）\n  - Difyワークフロー起動（モック実装）\n- ✅ デモ機能（動画人数カウント）\n  - スマホ動画アップロード\n  - ffmpegによる5秒ごとのフレーム抽出\n  - OpenAI Vision API (GPT-4o)による人数カウント\n  - 予約人数との差分検知\n  - Dify APIへの結果送信\n\n### 実装予定\n- ⏳ PostgreSQLデータベース統合\n- ⏳ Dify Webhook実装\n- ⏳ SwitchBot API連携\n- ⏳ SendGrid/Twilio統合\n- ⏳ 認証機能\n- ⏳ 顔写真・免許証アップロード機能\n\n## セキュリティ考慮事項\n\n- 個人情報（免許証・顔写真）の暗号化保管\n- TLS必須\n- アクセス権限管理（オーナーのみ）\n- 監査ログの保存\n\n## プライバシー\n\n- 宿泊者からの同意取得\n- データ保存期間の設定\n- 削除要請への対応\n","size_bytes":6806},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/examples/GuestTimeline.tsx":{"content":"import GuestTimeline from '../GuestTimeline';\n\nexport default function GuestTimelineExample() {\n  const mockEvents = [\n    {\n      id: 1,\n      timestamp: \"2025-10-20T15:30:00\",\n      eventType: \"enter\" as const,\n      peopleCount: 4\n    },\n    {\n      id: 2,\n      timestamp: \"2025-10-20T18:15:00\",\n      eventType: \"enter\" as const,\n      peopleCount: 6\n    },\n    {\n      id: 3,\n      timestamp: \"2025-10-20T22:00:00\",\n      eventType: \"leave\" as const,\n      peopleCount: 2\n    }\n  ];\n\n  return <GuestTimeline events={mockEvents} />;\n}\n","size_bytes":540},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Future schema for vacation rental management\n// TODO: Implement these tables when migrating from in-memory storage to PostgreSQL\n\nexport const guests = pgTable(\"guests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  age: integer(\"age\"),\n  licenseImageUrl: text(\"license_image_url\"),\n  faceImageUrl: text(\"face_image_url\"), // 顔写真URL\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n});\n\nexport const rooms = pgTable(\"rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  notes: text(\"notes\"),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  guestId: varchar(\"guest_id\").notNull().references(() => guests.id),\n  roomId: varchar(\"room_id\").notNull().references(() => rooms.id),\n  reservedAt: timestamp(\"reserved_at\").notNull(),\n  reservedCount: integer(\"reserved_count\").notNull(),\n  status: text(\"status\").notNull().default(\"booked\"), // booked, checked_in, checked_out, canceled\n});\n\nexport const insertGuestSchema = createInsertSchema(guests).omit({ id: true });\nexport const insertRoomSchema = createInsertSchema(rooms).omit({ id: true });\nexport const insertBookingSchema = createInsertSchema(bookings).omit({ id: true });\n\nexport type Guest = typeof guests.$inferSelect;\nexport type InsertGuest = z.infer<typeof insertGuestSchema>;\nexport type Room = typeof rooms.$inferSelect;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n","size_bytes":2291},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/AppSidebar.tsx":{"content":"import { Home, Users, AlertTriangle, Lock, Settings, TestTube } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"ダッシュボード\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"予約一覧\",\n    url: \"/bookings\",\n    icon: Users,\n  },\n  {\n    title: \"アラート\",\n    url: \"/alerts\",\n    icon: AlertTriangle,\n  },\n  {\n    title: \"デバイス制御\",\n    url: \"/devices\",\n    icon: Lock,\n  },\n  {\n    title: \"デモ\",\n    url: \"/demo\",\n    icon: TestTube,\n  },\n  {\n    title: \"設定\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nexport default function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Minpaku Guard</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.url}`}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":1640},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { existsSync } from \"fs\";\nimport { z } from \"zod\";\n\nconst execAsync = promisify(exec);\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// OpenAI Vision API: Count people in an image\nasync function countPeopleInFrame(base64Image: string): Promise<number> {\n  const openaiApiKey = process.env.OPENAI_API_KEY;\n  \n  if (!openaiApiKey) {\n    console.warn(\"OPENAI_API_KEY not found, using mock count\");\n    return Math.floor(Math.random() * 5) + 1;\n  }\n\n  try {\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${openaiApiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: \"この画像に写っている人の数を数えてください。数字だけを答えてください。人が一人もいない場合は0と答えてください。\"\n              },\n              {\n                type: \"image_url\",\n                image_url: {\n                  url: `data:image/jpeg;base64,${base64Image}`\n                }\n              }\n            ]\n          }\n        ],\n        max_tokens: 100\n      })\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"OpenAI API error:\", errorText);\n      // Fallback to mock on error\n      return Math.floor(Math.random() * 5) + 1;\n    }\n\n    const data = await response.json();\n    const countText = data.choices[0]?.message?.content?.trim() || \"0\";\n    const count = parseInt(countText, 10);\n\n    // Validate the count is a valid number\n    if (isNaN(count) || count < 0) {\n      console.warn(\"Invalid count from OpenAI:\", countText);\n      return Math.floor(Math.random() * 5) + 1;\n    }\n\n    return count;\n  } catch (error) {\n    console.error(\"Error calling OpenAI Vision API:\", error);\n    // Fallback to mock on error\n    return Math.floor(Math.random() * 5) + 1;\n  }\n}\n\n// Video processing utility: Extract frames every 5 seconds\nasync function extractFramesFromVideo(videoBuffer: Buffer): Promise<string[]> {\n  const tempDir = path.join(process.cwd(), \"temp\");\n  const timestamp = Date.now();\n  const videoPath = path.join(tempDir, `video_${timestamp}.mp4`);\n  const framePrefix = `frame_${timestamp}`;\n  const outputPattern = path.join(tempDir, `${framePrefix}_%03d.jpg`);\n\n  try {\n    // Create temp directory if not exists\n    if (!existsSync(tempDir)) {\n      await fs.mkdir(tempDir, { recursive: true });\n    }\n\n    // Save video buffer to file\n    await fs.writeFile(videoPath, videoBuffer);\n\n    // Extract frames every 5 seconds using ffmpeg\n    await execAsync(\n      `ffmpeg -i \"${videoPath}\" -vf \"fps=1/5\" \"${outputPattern}\"`\n    );\n\n    // Get all generated frame files\n    const files = await fs.readdir(tempDir);\n    const frameFiles = files\n      .filter(f => f.startsWith(framePrefix) && f.endsWith('.jpg'))\n      .map(f => path.join(tempDir, f));\n\n    // Check if frames were extracted\n    if (frameFiles.length === 0) {\n      console.error(\"No frames extracted from video\");\n      throw new Error(\"動画からフレームを抽出できませんでした\");\n    }\n\n    // Read frames as base64\n    const frames: string[] = [];\n    for (const framePath of frameFiles) {\n      const frameBuffer = await fs.readFile(framePath);\n      frames.push(frameBuffer.toString('base64'));\n    }\n\n    // Cleanup\n    await fs.unlink(videoPath);\n    for (const framePath of frameFiles) {\n      await fs.unlink(framePath);\n    }\n\n    return frames;\n  } catch (error) {\n    console.error(\"Frame extraction error:\", error);\n    // Cleanup on error\n    try {\n      if (existsSync(videoPath)) await fs.unlink(videoPath);\n      // Cleanup any partial frames\n      const files = await fs.readdir(tempDir);\n      const partialFrames = files\n        .filter(f => f.startsWith(framePrefix) && f.endsWith('.jpg'))\n        .map(f => path.join(tempDir, f));\n      for (const framePath of partialFrames) {\n        await fs.unlink(framePath);\n      }\n    } catch {}\n    throw error;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Demo: Face verification endpoint\n  app.post(\"/api/demo/verify\", upload.single(\"photo\"), async (req, res) => {\n    try {\n      const { guestId } = req.body;\n      const photo = req.file;\n\n      if (!photo || !guestId) {\n        return res.status(400).json({ error: \"写真とゲストIDが必要です\" });\n      }\n\n      // Mock guest data\n      const mockGuests: Record<string, string> = {\n        \"1\": \"田中太郎\",\n        \"2\": \"佐藤花子\",\n        \"3\": \"山田次郎\",\n      };\n\n      const guestName = mockGuests[guestId] || \"不明なゲスト\";\n\n      // Mock Face API response\n      // TODO: Replace with actual Azure Face API or AWS Rekognition\n      const confidence = Math.random() * 0.4 + 0.6; // 60-100%\n      const isMatch = confidence > 0.8; // 80% threshold\n\n      res.json({\n        isMatch,\n        confidence,\n        guestName,\n      });\n    } catch (error) {\n      console.error(\"Face verification error:\", error);\n      res.status(500).json({ error: \"顔照合に失敗しました\" });\n    }\n  });\n\n  // Demo: Trigger Dify workflow endpoint\n  app.post(\"/api/demo/trigger-dify\", async (req, res) => {\n    try {\n      const { guestId, confidence, isMatch } = req.body;\n\n      if (!guestId || confidence === undefined || isMatch === undefined) {\n        return res.status(400).json({ error: \"必要なパラメータが不足しています\" });\n      }\n\n      // Mock Dify workflow trigger\n      // TODO: Replace with actual Dify API call\n      const workflowId = `workflow_${Date.now()}`;\n      \n      // In production, you would call Dify's API here:\n      // const difyResponse = await fetch(process.env.DIFY_WEBHOOK_URL, {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify({\n      //     guest_id: guestId,\n      //     face_confidence: confidence,\n      //     is_verified: isMatch\n      //   })\n      // });\n\n      res.json({\n        success: true,\n        workflowId,\n        message: `Difyワークフロー ${workflowId} を起動しました（モック）`,\n      });\n    } catch (error) {\n      console.error(\"Dify workflow trigger error:\", error);\n      res.status(500).json({ error: \"Difyワークフロー起動に失敗しました\" });\n    }\n  });\n\n  // Demo: Process video - extract frames and count people\n  app.post(\"/api/demo/process-video\", upload.single(\"video\"), async (req, res) => {\n    try {\n      const { reservedCount } = req.body;\n      const video = req.file;\n\n      if (!video) {\n        return res.status(400).json({ error: \"動画ファイルが必要です\" });\n      }\n\n      if (!reservedCount) {\n        return res.status(400).json({ error: \"予約人数が必要です\" });\n      }\n\n      const reserved = parseInt(reservedCount, 10);\n\n      // Extract frames from video\n      const frames = await extractFramesFromVideo(video.buffer);\n\n      if (frames.length === 0) {\n        return res.status(400).json({ error: \"動画からフレームを抽出できませんでした\" });\n      }\n\n      // Count people in each frame using OpenAI Vision API\n      console.log(`Processing ${frames.length} frames with OpenAI Vision API...`);\n      const frameCounts: number[] = [];\n      \n      for (const frame of frames) {\n        const count = await countPeopleInFrame(frame);\n        frameCounts.push(count);\n        console.log(`Frame ${frameCounts.length}: ${count} people detected`);\n      }\n      \n      // Use the maximum count as detected people count\n      const detectedCount = frameCounts.length > 0 ? Math.max(...frameCounts) : 0;\n      console.log(`Maximum detected count: ${detectedCount}`);\n\n      // Compare with reserved count\n      const status = detectedCount > reserved ? \"error\" : \"normal\";\n      const message = detectedCount > reserved\n        ? `警告: 予約人数(${reserved}人)より多い${detectedCount}人を検出しました`\n        : `正常: 検出人数(${detectedCount}人)は予約人数(${reserved}人)以内です`;\n\n      res.json({\n        success: true,\n        reservedCount: reserved,\n        detectedCount,\n        frameCount: frames.length,\n        frameCounts,\n        status,\n        message,\n        frames: frames.map((f, i) => ({ \n          index: i + 1, \n          peopleCount: frameCounts[i],\n          image: `data:image/jpeg;base64,${f}`\n        }))\n      });\n    } catch (error) {\n      console.error(\"Video processing error:\", error);\n      res.status(500).json({ error: \"動画処理に失敗しました\" });\n    }\n  });\n\n  // Demo: Send results to Dify\n  app.post(\"/api/demo/send-to-dify\", async (req, res) => {\n    try {\n      const { reservedCount, detectedCount, frames } = req.body;\n\n      if (!reservedCount || !detectedCount || !frames) {\n        return res.status(400).json({ error: \"必要なパラメータが不足しています\" });\n      }\n\n      const difyApiKey = process.env.DIFY_API_KEY;\n      if (!difyApiKey) {\n        return res.status(500).json({ error: \"DIFY_API_KEYが設定されていません\" });\n      }\n\n      // Call Dify API\n      const difyUrl = \"http://dify.tamao.tech/v1/workflows/run\";\n      \n      const difyResponse = await fetch(difyUrl, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${difyApiKey}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          inputs: {\n            reserved_count: reservedCount,\n            detected_count: detectedCount,\n            frame_data: frames,\n          },\n          response_mode: \"blocking\",\n          user: \"minpaku-guard-system\"\n        })\n      });\n\n      if (!difyResponse.ok) {\n        const errorText = await difyResponse.text();\n        console.error(\"Dify API error:\", errorText);\n        return res.status(500).json({ \n          error: \"Dify API呼び出しに失敗しました\",\n          details: errorText\n        });\n      }\n\n      const difyResult = await difyResponse.json();\n\n      res.json({\n        success: true,\n        difyResponse: difyResult,\n        message: \"Difyワークフローに送信しました\"\n      });\n    } catch (error) {\n      console.error(\"Dify send error:\", error);\n      res.status(500).json({ \n        error: \"Difyへの送信に失敗しました\",\n        details: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Bookings API\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Get bookings error:\", error);\n      res.status(500).json({ error: \"予約一覧の取得に失敗しました\" });\n    }\n  });\n\n  app.get(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id, 10);\n      const booking = await storage.getBooking(id);\n      \n      if (!booking) {\n        return res.status(404).json({ error: \"予約が見つかりません\" });\n      }\n      \n      res.json(booking);\n    } catch (error) {\n      console.error(\"Get booking error:\", error);\n      res.status(500).json({ error: \"予約の取得に失敗しました\" });\n    }\n  });\n\n  app.patch(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id, 10);\n      \n      // Validate request body\n      const updateSchema = z.object({\n        guestName: z.string().min(1).optional(),\n        reservedAt: z.string().datetime().optional(),\n        reservedCount: z.number().int().min(1).max(20).optional(),\n        actualCount: z.number().int().min(0).max(20).nullable().optional(),\n        status: z.enum([\"booked\", \"checked_in\", \"checked_out\"]).optional(),\n        roomName: z.string().min(1).optional(),\n      });\n      \n      const validationResult = updateSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"無効なデータです\",\n          details: validationResult.error.errors \n        });\n      }\n      \n      const updated = await storage.updateBooking(id, validationResult.data);\n      \n      if (!updated) {\n        return res.status(404).json({ error: \"予約が見つかりません\" });\n      }\n      \n      res.json(updated);\n    } catch (error) {\n      console.error(\"Update booking error:\", error);\n      res.status(500).json({ error: \"予約の更新に失敗しました\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":13001},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}\n","size_bytes":118},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/examples/AlertsList.tsx":{"content":"import AlertsList from '../AlertsList';\n\nexport default function AlertsListExample() {\n  const mockAlerts = [\n    {\n      id: 1,\n      bookingId: 1,\n      guestName: \"山田 太郎\",\n      roomName: \"漁師の家\",\n      detectedAt: \"2025-10-20T18:30:00\",\n      reservedCount: 4,\n      actualCount: 6,\n      status: \"open\" as const\n    },\n    {\n      id: 2,\n      bookingId: 3,\n      guestName: \"鈴木 一郎\",\n      roomName: \"長屋 C\",\n      detectedAt: \"2025-10-19T20:15:00\",\n      reservedCount: 2,\n      actualCount: 3,\n      status: \"acknowledged\" as const\n    }\n  ];\n\n  return (\n    <AlertsList \n      alerts={mockAlerts}\n      onAcknowledge={(id) => console.log('Acknowledge alert:', id)}\n      onContact={(id, method) => console.log('Contact guest:', id, method)}\n    />\n  );\n}\n","size_bytes":789},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Temporary booking type for in-memory storage\nexport interface BookingData {\n  id: number;\n  guestName: string;\n  reservedAt: string;\n  reservedCount: number;\n  actualCount: number | null;\n  status: \"booked\" | \"checked_in\" | \"checked_out\";\n  roomName: string;\n  faceImageUrl?: string | null;\n}\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Booking methods\n  getBookings(): Promise<BookingData[]>;\n  getBooking(id: number): Promise<BookingData | undefined>;\n  updateBooking(id: number, data: Partial<Omit<BookingData, 'id'>>): Promise<BookingData | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private bookings: Map<number, BookingData>;\n\n  constructor() {\n    this.users = new Map();\n    this.bookings = new Map();\n    \n    // Initialize with mock bookings\n    this.bookings.set(1, {\n      id: 1,\n      guestName: \"田中太郎\",\n      reservedAt: \"2024-10-15T14:00:00Z\",\n      reservedCount: 4,\n      actualCount: 6,\n      status: \"checked_in\",\n      roomName: \"漁師町の民家\",\n      faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=Tanaka\"\n    });\n    this.bookings.set(2, {\n      id: 2,\n      guestName: \"佐藤花子\",\n      reservedAt: \"2024-10-16T15:00:00Z\",\n      reservedCount: 2,\n      actualCount: null,\n      status: \"booked\",\n      roomName: \"長屋1号室\",\n      faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=Sato\"\n    });\n    this.bookings.set(3, {\n      id: 3,\n      guestName: \"山田次郎\",\n      reservedAt: \"2024-10-17T16:00:00Z\",\n      reservedCount: 3,\n      actualCount: 3,\n      status: \"checked_in\",\n      roomName: \"漁師町の民家\",\n      faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=Yamada\"\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getBookings(): Promise<BookingData[]> {\n    return Array.from(this.bookings.values());\n  }\n\n  async getBooking(id: number): Promise<BookingData | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async updateBooking(id: number, data: Partial<Omit<BookingData, 'id'>>): Promise<BookingData | undefined> {\n    const booking = this.bookings.get(id);\n    if (!booking) {\n      return undefined;\n    }\n    \n    const updated = { ...booking, ...data };\n    this.bookings.set(id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":3085},"client/src/pages/Bookings.tsx":{"content":"import BookingsTable from \"@/components/BookingsTable\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Bookings() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const allBookings = [\n    {\n      id: 1,\n      guestName: \"山田 太郎\",\n      reservedAt: \"2025-10-20T15:00:00\",\n      reservedCount: 4,\n      actualCount: 6,\n      status: \"checked_in\" as const,\n      roomName: \"漁師の家\",\n      faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=YamadaTaro\"\n    },\n    {\n      id: 2,\n      guestName: \"佐藤 花子\",\n      reservedAt: \"2025-10-21T16:00:00\",\n      reservedCount: 2,\n      actualCount: 2,\n      status: \"checked_in\" as const,\n      roomName: \"長屋 A\",\n      faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=SatoHanako\"\n    },\n    {\n      id: 3,\n      guestName: \"田中 次郎\",\n      reservedAt: \"2025-10-22T14:00:00\",\n      reservedCount: 3,\n      actualCount: null,\n      status: \"booked\" as const,\n      roomName: \"長屋 B\",\n      faceImageUrl: null\n    },\n    {\n      id: 4,\n      guestName: \"鈴木 一郎\",\n      reservedAt: \"2025-10-19T13:00:00\",\n      reservedCount: 2,\n      actualCount: 2,\n      status: \"checked_out\" as const,\n      roomName: \"長屋 C\",\n      faceImageUrl: \"https://api.dicebear.com/7.x/avataaars/svg?seed=SuzukiIchiro\"\n    }\n  ];\n\n  const filteredBookings = searchTerm\n    ? allBookings.filter(b => \n        b.guestName.includes(searchTerm) || \n        b.roomName.includes(searchTerm)\n      )\n    : allBookings;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">予約一覧</h1>\n          <p className=\"text-muted-foreground\">全ての予約を管理</p>\n        </div>\n        <Button data-testid=\"button-add-booking\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          新規予約\n        </Button>\n      </div>\n\n      <Card className=\"p-6\">\n        <div className=\"mb-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"氏名または部屋名で検索...\"\n              className=\"pl-10\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n        <BookingsTable \n          bookings={filteredBookings}\n          onViewDetails={(id) => console.log('View booking:', id)}\n          onCall={(id) => console.log('Call guest from booking:', id)}\n          onEmail={(id) => console.log('Email guest from booking:', id)}\n        />\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2941},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean>(() => {\n    // Initialize using matchMedia for consistent viewport detection\n    if (typeof window !== \"undefined\") {\n      const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n      return mql.matches\n    }\n    return false\n  })\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(mql.matches)\n    }\n    mql.addEventListener(\"change\", onChange)\n    // Set initial value using matchMedia\n    setIsMobile(mql.matches)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return isMobile\n}\n","size_bytes":780},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/DeviceControl.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Lock, LockOpen, Power, PowerOff } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport interface Device {\n  id: number;\n  name: string;\n  type: \"lock\" | \"breaker\";\n  roomName: string;\n  status: \"online\" | \"offline\";\n  state: \"on\" | \"off\";\n}\n\ninterface DeviceControlProps {\n  devices: Device[];\n  onControl?: (deviceId: number, command: string) => void;\n}\n\nexport default function DeviceControl({ devices, onControl }: DeviceControlProps) {\n  const [deviceStates, setDeviceStates] = useState<Record<number, string>>(\n    devices.reduce((acc, device) => ({ ...acc, [device.id]: device.state }), {})\n  );\n\n  const handleControl = (deviceId: number, command: string) => {\n    setDeviceStates(prev => ({ ...prev, [deviceId]: command === 'lock' || command === 'power_on' ? 'on' : 'off' }));\n    onControl?.(deviceId, command);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      {devices.map((device) => (\n        <Card key={device.id} className=\"p-6\" data-testid={`card-device-${device.id}`}>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold\" data-testid={`text-device-name-${device.id}`}>\n                  {device.name}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">{device.roomName}</p>\n              </div>\n              <div className={`px-2 py-1 rounded text-xs font-medium ${\n                device.status === \"online\" \n                  ? \"bg-green-100 dark:bg-green-950 text-green-700 dark:text-green-300\" \n                  : \"bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400\"\n              }`}>\n                {device.status === \"online\" ? \"オンライン\" : \"オフライン\"}\n              </div>\n            </div>\n            \n            {device.type === \"lock\" ? (\n              <div className=\"flex gap-2\">\n                <Button \n                  variant={deviceStates[device.id] === \"on\" ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                  onClick={() => handleControl(device.id, \"lock\")}\n                  data-testid={`button-lock-${device.id}`}\n                >\n                  <Lock className=\"w-4 h-4 mr-2\" />\n                  施錠\n                </Button>\n                <Button \n                  variant={deviceStates[device.id] === \"off\" ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                  onClick={() => handleControl(device.id, \"unlock\")}\n                  data-testid={`button-unlock-${device.id}`}\n                >\n                  <LockOpen className=\"w-4 h-4 mr-2\" />\n                  解錠\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex gap-2\">\n                <Button \n                  variant={deviceStates[device.id] === \"on\" ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                  onClick={() => handleControl(device.id, \"power_on\")}\n                  data-testid={`button-power-on-${device.id}`}\n                >\n                  <Power className=\"w-4 h-4 mr-2\" />\n                  ON\n                </Button>\n                <Button \n                  variant={deviceStates[device.id] === \"off\" ? \"default\" : \"outline\"}\n                  className=\"flex-1\"\n                  onClick={() => handleControl(device.id, \"power_off\")}\n                  data-testid={`button-power-off-${device.id}`}\n                >\n                  <PowerOff className=\"w-4 h-4 mr-2\" />\n                  OFF\n                </Button>\n              </div>\n            )}\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3815},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport DashboardStats from \"@/components/DashboardStats\";\nimport BookingsTable from \"@/components/BookingsTable\";\nimport AlertsList from \"@/components/AlertsList\";\nimport EditBookingDialog from \"@/components/EditBookingDialog\";\nimport { Card } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Booking } from \"@/components/BookingsTable\";\n\nexport default function Dashboard() {\n  const [editingBooking, setEditingBooking] = useState<Booking | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  \n  const { data: bookings = [], isLoading } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  const handleEdit = (booking: Booking) => {\n    setEditingBooking(booking);\n    setIsEditDialogOpen(true);\n  };\n\n  const activeAlerts = [\n    {\n      id: 1,\n      bookingId: 1,\n      guestName: \"山田 太郎\",\n      roomName: \"漁師の家\",\n      detectedAt: \"2025-10-20T18:30:00\",\n      reservedCount: 4,\n      actualCount: 6,\n      status: \"open\" as const\n    },\n    {\n      id: 2,\n      bookingId: 3,\n      guestName: \"鈴木 一郎\",\n      roomName: \"長屋 C\",\n      detectedAt: \"2025-10-19T20:15:00\",\n      reservedCount: 2,\n      actualCount: 3,\n      status: \"acknowledged\" as const\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold mb-2\">ダッシュボード</h1>\n        <p className=\"text-muted-foreground\">民泊運営の状況を一目で確認</p>\n      </div>\n\n      <DashboardStats />\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2 space-y-4\">\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">本日の到着予定</h2>\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">読み込み中...</div>\n            ) : (\n              <BookingsTable \n                bookings={bookings}\n                onEdit={handleEdit}\n                onViewDetails={(id) => console.log('View booking:', id)}\n                onCall={(id) => console.log('Call guest from booking:', id)}\n                onEmail={(id) => console.log('Email guest from booking:', id)}\n              />\n            )}\n          </Card>\n        </div>\n\n        <div>\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">アクティブなアラート</h2>\n            <AlertsList \n              alerts={activeAlerts}\n              onAcknowledge={(id) => console.log('Acknowledge:', id)}\n              onContact={(id, method) => console.log('Contact:', id, method)}\n            />\n          </Card>\n        </div>\n      </div>\n\n      <EditBookingDialog\n        booking={editingBooking}\n        open={isEditDialogOpen}\n        onOpenChange={setIsEditDialogOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":2908},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"design_guidelines.md":{"content":"# Design Guidelines: Vacation Rental Management Dashboard\n\n## Design Approach: Utility-First Dashboard System\n\n**Selected Framework**: Material Design principles adapted for operational dashboard  \n**Rationale**: Information-dense property management tool requiring clear data hierarchy, efficient workflows, and reliable interaction patterns for daily remote operations.\n\n**Core Principles**:\n- Operational efficiency over visual flair\n- Clear information hierarchy for quick decision-making\n- Consistent patterns for reliable daily use\n- Responsive design for desktop and mobile monitoring\n\n---\n\n## Color Palette\n\n### Primary Colors\n**Light Mode:**\n- Primary: 349 45% 87% (White Shrimp Pink - #F6C6D0)\n- Primary Hover: 349 45% 82%\n- Background: 0 0% 100% (White)\n- Surface: 0 0% 98%\n- Border: 0 0% 90%\n\n**Dark Mode:**\n- Primary: 349 45% 75%\n- Primary Hover: 349 45% 70%\n- Background: 222 47% 11%\n- Surface: 217 33% 17%\n- Border: 217 33% 25%\n\n### Semantic Colors\n- Success: 142 71% 45% (Green for device status, confirmations)\n- Warning: 38 92% 50% (Amber for pending alerts)\n- Danger: 0 84% 60% (Red for critical discrepancy alerts)\n- Info: 217 91% 60% (Blue for informational messages)\n\n### Text Colors\n- Primary Text (Light): 0 0% 20%\n- Secondary Text (Light): 0 0% 45%\n- Primary Text (Dark): 0 0% 95%\n- Secondary Text (Dark): 0 0% 70%\n\n---\n\n## Typography\n\n### Font Families\n- **Primary**: Inter (Google Fonts) - Clean, readable for data tables and UI\n- **Monospace**: JetBrains Mono - For timestamps, IDs, device codes\n\n### Type Scale\n- Display (Dashboard Titles): 2.25rem / 36px, font-weight 700\n- H1 (Page Headers): 1.875rem / 30px, font-weight 600\n- H2 (Section Headers): 1.5rem / 24px, font-weight 600\n- H3 (Card Headers): 1.25rem / 20px, font-weight 600\n- Body Large: 1rem / 16px, font-weight 400\n- Body: 0.875rem / 14px, font-weight 400\n- Small (Metadata): 0.75rem / 12px, font-weight 400\n\n---\n\n## Layout System\n\n### Spacing Primitives\n**Consistent spacing using Tailwind units**: 2, 4, 6, 8, 12, 16, 24  \n- Tight spacing (p-2, gap-2): Within compact UI elements\n- Standard spacing (p-4, gap-4): Cards, form fields\n- Generous spacing (p-6, p-8): Section padding, page containers\n- Extra spacing (p-12, p-16, p-24): Major section separations\n\n### Grid & Containers\n- Max container width: max-w-7xl (1280px)\n- Dashboard grid: 12-column responsive grid\n- Card layouts: 1 column mobile, 2-3 columns tablet/desktop\n- Data tables: Full-width with horizontal scroll on mobile\n\n---\n\n## Component Library\n\n### Navigation\n- **Top Navigation Bar**: Fixed header with logo, property selector dropdown, user menu, notification badge\n- **Sidebar Navigation**: Collapsible on mobile, persistent on desktop with icon + label pattern\n- **Breadcrumbs**: For deep navigation within guest/booking details\n\n### Data Display\n- **Dashboard Cards**: Metric cards showing key stats (today's arrivals, active alerts, device status) with icon, number, and trend indicator\n- **Data Tables**: Sortable, filterable tables with row actions (view, edit, notify)\n- **Timeline**: Vertical timeline for entry/exit events with timestamps and people count badges\n- **Alert List**: Card-based alerts with severity indicators, timestamp, and action buttons\n\n### Forms & Inputs\n- **Form Fields**: Floating labels, clear validation states, helper text\n- **Date/Time Pickers**: For reservation management\n- **File Upload**: Drag-drop zones for license/face images\n- **Multi-select**: For filtering and batch operations\n\n### Action Components\n- **Primary Button**: White shrimp pink background, white text, rounded-md\n- **Secondary Button**: Outline with pink border, pink text\n- **Danger Button**: Red background for critical actions (lock override)\n- **Icon Buttons**: For device controls and quick actions\n- **FAB (Floating Action)**: Bottom-right for quick \"Add Booking\" on mobile\n\n### Feedback Elements\n- **Toast Notifications**: Top-right positioned, auto-dismiss with progress bar\n- **Alert Banners**: Full-width contextual alerts above content\n- **Status Badges**: Pill-shaped indicators (booked/checked-in/checked-out)\n- **Loading States**: Skeleton screens for tables, spinner for buttons\n\n### Device Control Panel\n- **Device Cards**: Visual representation of locks/breakers with large toggle/action buttons\n- **Status Indicators**: Color-coded icons (green=active, gray=inactive, red=error)\n- **Execution Log**: Compact log list with timestamp, action, result\n\n---\n\n## Specialized Dashboard Elements\n\n### Guest Detail Page Layout\n- **Hero Section**: Guest photo (if available) with name, reservation details\n- **Info Grid**: 3-column grid (mobile: 1-col) showing age, phone, email, license preview\n- **Tab Navigation**: Switch between Overview, Entry Logs, Alerts, Communication History\n- **Action Toolbar**: Sticky footer with Call, Email, Device Control quick actions\n\n### Alert Management\n- **Alert Cards**: \n  - Header: Severity icon + \"Reserved: 4, Actual: 6\" in bold\n  - Body: Guest name, room, detection timestamp\n  - Footer: Action buttons (Acknowledge, Contact Guest, View Details)\n- **Filtering**: Quick filters for Open/Acknowledged/Resolved\n\n### Communication Panel\n- **Template Selector**: Dropdown with pre-written messages (overbooking, check-in reminder)\n- **Channel Tabs**: Switch between Email/Phone/SMS\n- **Send History**: Table showing all communications with delivery status\n\n---\n\n## Animation Guidelines\n\n**Minimal & Purposeful**:\n- Page transitions: Simple 200ms fade\n- Dropdown/modal: 150ms scale + fade\n- Button feedback: Subtle 100ms background color transition\n- NO scroll-triggered animations\n- NO decorative motion\n\n---\n\n## Responsive Breakpoints\n\n- Mobile: < 640px (sm) - Single column, collapsible nav\n  - **iPhone 13 (390px)**: Optimized for touch interactions with horizontal scroll on data tables\n- Tablet: 640px - 1024px (md-lg) - 2-column cards, visible sidebar\n- Desktop: > 1024px (xl) - Full multi-column layout, expanded nav\n\n### Mobile Optimizations (iPhone 13)\n\n**Screen**: 390px × 844px (portrait)\n\n**Touch Targets**: \n- Interactive elements maintain visual size (32-40px) while providing adequate tap area\n- Data tables use horizontal scroll to preserve readability\n- `.touch-target` utility class available for extending clickable area to 44×44px minimum\n\n**Layout Adaptations**:\n- Stats cards: Single column stack on mobile\n- Bookings table: Horizontal scroll enabled (`overflow-x-auto`)\n- Sidebar: Auto-collapse on mobile with toggle button\n- Forms: Full-width inputs with comfortable spacing\n\n---\n\n## Images\n\n**Dashboard doesn't require hero images** - this is an operational tool. Images used are:\n- **Guest Photos**: Small circular avatars (48px) in tables, large (200px) in detail view\n- **License Images**: Thumbnail (80px) with click to enlarge modal\n- **Empty States**: Simple illustrations for \"No bookings today\", \"No alerts\"\n- **Device Icons**: SVG icons from Heroicons (lock, lightning bolt, bell)\n\nNo marketing imagery needed - focus on clear iconography and data visualization.","size_bytes":7017},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/DashboardStats.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Users, AlertTriangle, Lock } from \"lucide-react\";\n\ninterface StatCardProps {\n  icon: React.ReactNode;\n  label: string;\n  value: string | number;\n  variant?: \"default\" | \"warning\" | \"success\";\n}\n\nfunction StatCard({ icon, label, value, variant = \"default\" }: StatCardProps) {\n  const colorClass = \n    variant === \"warning\" ? \"text-amber-500\" : \n    variant === \"success\" ? \"text-green-500\" : \n    \"text-primary\";\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm text-muted-foreground mb-1\">{label}</p>\n          <p className=\"text-3xl font-semibold\">{value}</p>\n        </div>\n        <div className={`${colorClass}`}>\n          {icon}\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default function DashboardStats() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n      <StatCard \n        icon={<Users className=\"w-8 h-8\" />}\n        label=\"入室中\"\n        value={5}\n        variant=\"success\"\n      />\n      <StatCard \n        icon={<AlertTriangle className=\"w-8 h-8\" />}\n        label=\"アラート\"\n        value={2}\n        variant=\"warning\"\n      />\n      <StatCard \n        icon={<Lock className=\"w-8 h-8\" />}\n        label=\"デバイス稼働状況\"\n        value=\"4/4\"\n        variant=\"success\"\n      />\n    </div>\n  );\n}\n","size_bytes":1433},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/Devices.tsx":{"content":"import DeviceControl from \"@/components/DeviceControl\";\nimport { Card } from \"@/components/ui/card\";\n\nexport default function Devices() {\n  const devices = [\n    {\n      id: 1,\n      name: \"玄関ドア\",\n      type: \"lock\" as const,\n      roomName: \"漁師の家\",\n      status: \"online\" as const,\n      state: \"on\" as const\n    },\n    {\n      id: 2,\n      name: \"ブレーカー\",\n      type: \"breaker\" as const,\n      roomName: \"漁師の家\",\n      status: \"online\" as const,\n      state: \"on\" as const\n    },\n    {\n      id: 3,\n      name: \"玄関ドア\",\n      type: \"lock\" as const,\n      roomName: \"長屋 A\",\n      status: \"online\" as const,\n      state: \"off\" as const\n    },\n    {\n      id: 4,\n      name: \"ブレーカー\",\n      type: \"breaker\" as const,\n      roomName: \"長屋 A\",\n      status: \"online\" as const,\n      state: \"on\" as const\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold mb-2\">デバイス制御</h1>\n        <p className=\"text-muted-foreground\">鍵とブレーカーを遠隔操作</p>\n      </div>\n\n      <DeviceControl \n        devices={devices}\n        onControl={(id, cmd) => {\n          console.log('Device control:', id, cmd);\n        }}\n      />\n\n      <Card className=\"p-6\">\n        <h3 className=\"font-semibold mb-4\">実行ログ</h3>\n        <div className=\"space-y-2 text-sm font-mono\">\n          <div className=\"flex justify-between py-2 border-b\">\n            <span className=\"text-muted-foreground\">2025-10-20 18:45:23</span>\n            <span>漁師の家 - 玄関ドア</span>\n            <span className=\"text-green-600 dark:text-green-400\">施錠成功</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b\">\n            <span className=\"text-muted-foreground\">2025-10-20 15:30:15</span>\n            <span>長屋 A - 玄関ドア</span>\n            <span className=\"text-green-600 dark:text-green-400\">解錠成功</span>\n          </div>\n          <div className=\"flex justify-between py-2 border-b\">\n            <span className=\"text-muted-foreground\">2025-10-20 15:30:10</span>\n            <span>長屋 A - ブレーカー</span>\n            <span className=\"text-green-600 dark:text-green-400\">ON成功</span>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2322},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/CreateBookingDialog.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst createBookingSchema = z.object({\n  guestName: z.string().min(1, \"氏名を入力してください\"),\n  roomId: z.string().min(1, \"部屋を選択してください\"),\n  reservedAt: z.string().min(1, \"予約日時を入力してください\"),\n  reservedCount: z.coerce.number().int().positive(\"予約人数は1以上を入力してください\"),\n});\n\ntype CreateBookingForm = z.infer<typeof createBookingSchema>;\n\ninterface Room {\n  id: string;\n  name: string;\n  address: string | null;\n  notes: string | null;\n}\n\ninterface CreateBookingDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function CreateBookingDialog({ open, onOpenChange }: CreateBookingDialogProps) {\n  const { toast } = useToast();\n\n  const { data: rooms = [] } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  const form = useForm<CreateBookingForm>({\n    resolver: zodResolver(createBookingSchema),\n    defaultValues: {\n      guestName: \"\",\n      roomId: \"\",\n      reservedAt: \"\",\n      reservedCount: 1,\n    },\n  });\n\n  // Reset form when dialog closes\n  useEffect(() => {\n    if (!open) {\n      form.reset();\n    }\n  }, [open, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CreateBookingForm) => {\n      // Convert datetime-local to ISO 8601 format\n      // datetime-local format: \"YYYY-MM-DDTHH:mm\"\n      // Add seconds to ensure proper parsing\n      const dateWithSeconds = data.reservedAt.includes(\":\") && data.reservedAt.split(\":\").length === 2\n        ? `${data.reservedAt}:00`\n        : data.reservedAt;\n      \n      const date = new Date(dateWithSeconds);\n      if (isNaN(date.getTime())) {\n        throw new Error(\"無効な日時形式です\");\n      }\n      \n      const reservedAtISO = date.toISOString();\n      \n      return await apiRequest(\"POST\", \"/api/bookings\", {\n        ...data,\n        reservedAt: reservedAtISO,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({\n        title: \"予約を作成しました\",\n        description: \"新しい予約が正常に追加されました\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"エラー\",\n        description: error.message || \"予約の作成に失敗しました\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateBookingForm) => {\n    createMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-create-booking\">\n        <DialogHeader>\n          <DialogTitle>新規予約作成</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"guestName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>氏名</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"山田 太郎\" \n                      {...field} \n                      data-testid=\"input-guest-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"roomId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>部屋</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-room\">\n                        <SelectValue placeholder=\"部屋を選択\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {rooms.map((room) => (\n                        <SelectItem \n                          key={room.id} \n                          value={room.id}\n                          data-testid={`select-room-option-${room.id}`}\n                        >\n                          {room.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"reservedAt\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>予約日時</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"datetime-local\" \n                      {...field} \n                      data-testid=\"input-reserved-at\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"reservedCount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>予約人数</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      min=\"1\" \n                      {...field} \n                      data-testid=\"input-reserved-count\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                キャンセル\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createMutation.isPending}\n                data-testid=\"button-submit\"\n              >\n                {createMutation.isPending ? \"作成中...\" : \"作成\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7007},"client/src/components/EditBookingDialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Booking } from \"./BookingsTable\";\n\nconst editBookingSchema = z.object({\n  guestName: z.string().min(1, \"氏名を入力してください\"),\n  reservedAt: z.string().min(1, \"予約日時を入力してください\"),\n  reservedCount: z.number().min(1, \"予約人数は1人以上にしてください\").max(20, \"予約人数は20人以下にしてください\"),\n  actualCount: z.number().min(0, \"実人数は0人以上にしてください\").max(20, \"実人数は20人以下にしてください\").nullable(),\n  roomName: z.string().min(1, \"部屋名を入力してください\"),\n  status: z.enum([\"booked\", \"checked_in\", \"checked_out\"]),\n});\n\ntype EditBookingFormData = z.infer<typeof editBookingSchema>;\n\ninterface EditBookingDialogProps {\n  booking: Booking | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function EditBookingDialog({ booking, open, onOpenChange }: EditBookingDialogProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<EditBookingFormData>({\n    resolver: zodResolver(editBookingSchema),\n    defaultValues: {\n      guestName: \"\",\n      reservedAt: \"\",\n      reservedCount: 1,\n      actualCount: null,\n      roomName: \"\",\n      status: \"booked\",\n    },\n  });\n\n  useEffect(() => {\n    if (booking && open) {\n      form.reset({\n        guestName: booking.guestName,\n        reservedAt: new Date(booking.reservedAt).toISOString().slice(0, 16),\n        reservedCount: booking.reservedCount,\n        actualCount: booking.actualCount,\n        roomName: booking.roomName,\n        status: booking.status,\n      });\n    }\n  }, [booking, open, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: EditBookingFormData) => {\n      if (!booking) throw new Error(\"予約が選択されていません\");\n      \n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/bookings/${booking.id}`,\n        {\n          ...data,\n          reservedAt: new Date(data.reservedAt).toISOString(),\n        }\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({\n        title: \"更新完了\",\n        description: \"予約情報を更新しました\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"エラー\",\n        description: error instanceof Error ? error.message : \"予約の更新に失敗しました\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EditBookingFormData) => {\n    updateMutation.mutate(data);\n  };\n\n  if (!booking) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-edit-booking\">\n        <DialogHeader>\n          <DialogTitle>予約情報の編集</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"guestName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>氏名</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      placeholder=\"山田 太郎\" \n                      data-testid=\"input-guest-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"reservedAt\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>予約日時</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"datetime-local\" \n                      data-testid=\"input-reserved-at\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"reservedCount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>予約人数</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"number\"\n                      min={1}\n                      max={20}\n                      onChange={(e) => field.onChange(parseInt(e.target.value, 10))}\n                      data-testid=\"input-reserved-count\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"actualCount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>実人数</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"number\"\n                      min={0}\n                      max={20}\n                      value={field.value ?? \"\"}\n                      onChange={(e) => field.onChange(e.target.value === \"\" ? null : parseInt(e.target.value, 10))}\n                      placeholder=\"未入室の場合は空欄\"\n                      data-testid=\"input-actual-count\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"roomName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>部屋名</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      placeholder=\"漁師の家\" \n                      data-testid=\"input-room-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>状態</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-status\">\n                        <SelectValue placeholder=\"状態を選択\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"booked\">未入室</SelectItem>\n                      <SelectItem value=\"checked_in\">入室中</SelectItem>\n                      <SelectItem value=\"checked_out\">チェックアウト</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                キャンセル\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                {updateMutation.isPending ? \"保存中...\" : \"保存\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8586},"client/src/components/DeleteBookingDialog.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Booking {\n  id: string;\n  guestName: string;\n}\n\ninterface DeleteBookingDialogProps {\n  booking: Booking | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function DeleteBookingDialog({ booking, open, onOpenChange }: DeleteBookingDialogProps) {\n  const { toast } = useToast();\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      if (!booking) throw new Error(\"予約が選択されていません\");\n      return await apiRequest(\"DELETE\", `/api/bookings/${booking.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({\n        title: \"予約を削除しました\",\n        description: \"予約が正常に削除されました\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"エラー\",\n        description: error.message || \"予約の削除に失敗しました\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = () => {\n    deleteMutation.mutate();\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent data-testid=\"dialog-delete-booking\">\n        <AlertDialogHeader>\n          <AlertDialogTitle>予約を削除しますか？</AlertDialogTitle>\n          <AlertDialogDescription>\n            {booking && (\n              <>\n                <span className=\"font-semibold\">{booking.guestName}</span>の予約を削除します。\n                この操作は取り消せません。\n              </>\n            )}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel data-testid=\"button-delete-cancel\">\n            キャンセル\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleDelete}\n            disabled={deleteMutation.isPending}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            data-testid=\"button-delete-confirm\"\n          >\n            {deleteMutation.isPending ? \"削除中...\" : \"削除\"}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":2630},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n// This is using OpenAI's API, which points to OpenAI's API servers and requires your own API key.\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function countPeopleInImage(base64Image: string): Promise<{\n  count: number;\n  confidence: number;\n  description: string;\n}> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content:\n            \"You are an expert in analyzing images to count people. Count the number of people visible in the image. Respond with JSON in this format: { 'count': number, 'confidence': number (0-1), 'description': string }\",\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"text\",\n              text: \"この画像に写っている人の数を正確に数えてください。一部だけ写っている人も含めてください。信頼度スコア（0-1）と簡潔な説明も含めてください。\",\n            },\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/jpeg;base64,${base64Image}`,\n              },\n            },\n          ],\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 500,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n\n    return {\n      count: Math.max(0, Math.round(result.count || 0)),\n      confidence: Math.max(0, Math.min(1, result.confidence || 0)),\n      description: result.description || \"\",\n    };\n  } catch (error) {\n    console.error(\"OpenAI Vision API error:\", error);\n    throw new Error(\"画像の人数検出に失敗しました: \" + (error instanceof Error ? error.message : String(error)));\n  }\n}\n","size_bytes":1974},"server/dify.ts":{"content":"interface DifyWorkflowRequest {\n  inputs: {\n    hasDiscrepancy: boolean;\n    reservedCount: number;\n    detectedCount: number;\n    bookingName?: string;\n  };\n  response_mode: string;\n  user: string;\n}\n\ninterface DifyWorkflowResponse {\n  workflow_run_id: string;\n  task_id: string;\n  data: {\n    id: string;\n    workflow_id: string;\n    status: string;\n    outputs: any;\n    error?: string;\n    elapsed_time: number;\n    total_tokens: number;\n    total_steps: number;\n    created_at: number;\n    finished_at: number;\n  };\n}\n\nexport async function triggerDifyWorkflow(\n  hasDiscrepancy: boolean,\n  reservedCount: number,\n  detectedCount: number,\n  bookingName?: string\n): Promise<DifyWorkflowResponse> {\n  const apiUrl = process.env.DIFY_API_URL;\n  const apiKey = process.env.DIFY_API_KEY;\n\n  if (!apiUrl || !apiKey) {\n    throw new Error(\"Dify API credentials are not configured\");\n  }\n\n  const requestBody: DifyWorkflowRequest = {\n    inputs: {\n      hasDiscrepancy,\n      reservedCount,\n      detectedCount,\n      bookingName,\n    },\n    response_mode: \"blocking\",\n    user: \"minpaku-guard-system\",\n  };\n\n  console.log(\"[Dify] Calling workflow API:\", apiUrl);\n  console.log(\"[Dify] Request body:\", JSON.stringify(requestBody, null, 2));\n\n  try {\n    const response = await fetch(`${apiUrl}/workflows/run`, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    const responseText = await response.text();\n    console.log(\"[Dify] Response status:\", response.status);\n    console.log(\"[Dify] Response body:\", responseText);\n\n    if (!response.ok) {\n      throw new Error(`Dify API error: ${response.status} - ${responseText}`);\n    }\n\n    const data = JSON.parse(responseText);\n    return data as DifyWorkflowResponse;\n  } catch (error) {\n    console.error(\"[Dify] Workflow trigger error:\", error);\n    throw new Error(\n      \"Difyワークフローの呼び出しに失敗しました: \" + \n      (error instanceof Error ? error.message : String(error))\n    );\n  }\n}\n","size_bytes":2105}},"version":2}